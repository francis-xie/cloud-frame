TCP编程：https://www.liaoxuefeng.com/wiki/1252599548343744/1305207629676577
在开发网络应用程序的时候，我们又会遇到Socket这个概念。
Socket是一个抽象概念，一个应用程序通过一个Socket来建立一个远程连接，而Socket内部通过TCP/IP协议把数据传输到网络：
┌───────────┐                                   ┌───────────┐
│Application│                                   │Application│
├───────────┤                                   ├───────────┤
│  Socket   │                                   │  Socket   │
├───────────┤                                   ├───────────┤
│    TCP    │                                   │    TCP    │
├───────────┤      ┌──────┐       ┌──────┐      ├───────────┤
│    IP     │<────>│Router│<─────>│Router│<────>│    IP     │
└───────────┘      └──────┘       └──────┘      └───────────┘
Socket、TCP和部分IP的功能都是由操作系统提供的，不同的编程语言只是提供了对操作系统调用的简单的封装。
例如，Java提供的几个Socket相关的类就封装了操作系统提供的接口。

为什么需要Socket进行网络通信？因为仅仅通过IP地址进行通信是不够的，
同一台计算机同一时间会运行多个网络应用程序，例如浏览器、QQ、邮件客户端等。
当操作系统接收到一个数据包的时候，如果只有IP地址，它没法判断应该发给哪个应用程序，
所以，操作系统抽象出Socket接口，每个应用程序需要各自对应到不同的Socket，数据包才能根据Socket正确地发到对应的应用程序。

一个Socket就是由IP地址和端口号（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号。
端口号总是由操作系统分配，它是一个0～65535之间的数字，其中，小于1024的端口属于特权端口，需要管理员权限，
大于1024的端口可以由任意用户的应用程序打开。
 101.202.99.2:1201
 101.202.99.2:1304
 101.202.99.2:15000
使用Socket进行网络编程时，本质上就是两个进程之间的网络通信。
其中一个进程必须充当服务器端，它会主动监听某个指定的端口，另一个进程必须充当客户端，
它必须主动连接服务器的IP地址和指定端口，如果连接成功，服务器端和客户端就成功地建立了一个TCP连接，
双方后续就可以随时发送和接收数据。

因此，当Socket连接成功地在服务器端和客户端之间建立后：
  对服务器端来说，它的Socket是指定的IP地址和指定的端口号；
  对客户端来说，它的Socket是它所在计算机的IP地址和一个由操作系统分配的随机端口号。

小结
使用Java进行TCP编程时，需要使用Socket模型：
  服务器端用ServerSocket监听指定端口；
  客户端使用Socket(InetAddress, port)连接服务器；
  服务器端用accept()接收连接并返回Socket；
  双方通过Socket打开InputStream/OutputStream读写数据；
  服务器端通常使用多线程同时处理多个客户端连接，利用线程池可大幅提升效率；
  flush()用于强制输出缓冲区到网络。

