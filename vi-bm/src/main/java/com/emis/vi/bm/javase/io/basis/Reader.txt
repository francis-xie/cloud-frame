Reader：https://www.liaoxuefeng.com/wiki/1252599548343744/1298366902304801
Reader是Java的IO库提供的另一个输入流接口。和InputStream的区别是，InputStream是一个字节流，即以byte为单位读取，
而Reader是一个字符流，即以char为单位读取：
InputStream	                        Reader
字节流，以byte为单位	            字符流，以char为单位
读取字节（-1，0~255）：int read()	读取字符（-1，0~65535）：int read()
读到字节数组：int read(byte[] b)	读到字符数组：int read(char[] c)

java.io.Reader是所有字符输入流的超类，它最主要的方法是：
public int read() throws IOException;
这个方法读取字符流的下一个字符，并返回字符表示的int，范围是0~65535。如果已读到末尾，返回-1。

如果我们读取一个纯ASCII编码的文本文件，上述代码工作是没有问题的。
但如果文件中包含中文，就会出现乱码，因为FileReader默认的编码与系统相关，
例如，Windows系统的默认编码可能是GBK，打开一个UTF-8编码的文本文件就会出现乱码。
要避免乱码问题，我们需要在创建FileReader时指定编码：(这应较新版的JDK才有，具体哪个版本未知)
Reader reader = new FileReader("src/readme.txt", StandardCharsets.UTF_8);

InputStreamReader
Reader和InputStream有什么关系？
除了特殊的CharArrayReader和StringReader，普通的Reader实际上是基于InputStream构造的，
因为Reader需要从InputStream中读入字节流（byte），然后，根据编码设置，再转换为char就可以实现字符流。
如果我们查看FileReader的源码，它在内部实际上持有一个FileInputStream。
既然Reader本质上是一个基于InputStream的byte到char的转换器，那么，如果我们已经有一个InputStream，
想把它转换为Reader，是完全可行的。InputStreamReader就是这样一个转换器，它可以把任何InputStream转换为Reader。

小结
Reader定义了所有字符输入流的超类：
FileReader实现了文件字符流输入，使用时需要指定编码；
CharArrayReader和StringReader可以在内存中模拟一个字符流输入。
Reader是基于InputStream构造的：可以通过InputStreamReader在指定编码的同时将任何InputStream转换为Reader。
总是使用try (resource)保证Reader正确关闭。
