package com.emis.vi.bm.thread.schedule;import com.emis.vi.bm.util.emisUtil;import org.springframework.jdbc.core.JdbcTemplate;import javax.servlet.ServletContext;import java.io.*;import java.nio.channels.FileLock;import java.rmi.RemoteException;import java.security.KeyFactory;import java.security.PublicKey;import java.security.Signature;import java.security.spec.X509EncodedKeySpec;import java.util.Date;import java.util.Enumeration;import java.util.HashMap;import java.util.Properties;/** * $Id$ * EMIS Server的實作類別. * * @author Robert * @version 2004/07/03 Jerry: 增加log.keepdays刪除幾天前的log檔. *///@Componentpublic final class emisServerImpl implements emisServer {    /**     * logs\\*.* 保留Log檔最多時間, 第一位是天, 最後為Milliseconds     */    private static final long MAX_LOGS_KEEP_TIMES = 3 * 24 * 60 * 60 * 1000;    private Properties oProps_;    private HashMap oMgrObjects_ = new HashMap();    private ServletContext oContext_;    private String sServerName_;    private int nStartUpErrorCount = 0;    private String sConfigFile_;    //@Autowired    protected JdbcTemplate jdbcTemplate;    /**     * EMIS Server的實作.     *     * @param oContext     * @throws Exception     */    public emisServerImpl(ServletContext oContext) throws Exception {        String sConfigFile = "E:\\Java\\IdeaProjects\\cloud-frame\\vi-bm\\src\\main\\resources\\bm.cfg";        boolean eventBoot = true;        oContext_ = oContext;        sConfigFile_ = sConfigFile;        oProps_ = this.getServerConfiguration(sConfigFile);        // 將cfg檔內為 system.XXXX 格式的 XXXX 設定到 System.properties 中        Properties _oSetSysProp = emisUtil.subProperties("system.", oProps_);        Enumeration e = _oSetSysProp.keys();        while (e.hasMoreElements()) {            Object key = e.nextElement();            System.setProperty((String) key, (String) _oSetSysProp.get(key));        }        if (oContext_.getAttribute(this.STR_EMIS_SERVER) != null) {            System.out.println("emisServer");        }        oContext_.setAttribute(emisServer.STR_EMIS_SERVER, this);        /*         * SCHED Table 會用到 bind name         * 也就是此 Server 的 name 是甚麼         */        sServerName_ = oProps_.getProperty("server.bindname");        if ((sServerName_ == null) || "".equals(sServerName_)) {            System.out.println("sServerName_");        }        /**         * 有些環境只有 IP , 沒有 DNS         */        String _sNameResolve = oProps_.getProperty(                "emis.client.resolvename", "BYHOSTNAME").toUpperCase();        if ("BYADDRESS".equals(_sNameResolve)) {            oContext_.setAttribute("emis.client.resolvename", new Boolean(false));        } else {            // true 為 by host name            oContext_.setAttribute("emis.client.resolvename", new Boolean(true));        }        //- 2004/07/04 Jerry: 將.cfg參數存入oContext_的attribute CFG_PROPS中.        oContext_.setAttribute("CFG_PROPS", oProps_);        System.out.println("emisServerImpl.constructor init complete.");        // 因為在 2000 上 service 開機時,有可能資料庫服務還沒完成啟動, 所以要寫成 event 式的        // after database connection build, we call the server startup event        if (eventBoot) {            Thread startupThread = new Thread(new emisStartup(this, oContext_));            startupThread.setDaemon(true);            startupThread.start();        } else {            startup();        }    }    /**     * 啟動.     *     * @throws Exception     */    public void startup() throws Exception {        // 2015/12/09 Joe 解决Resin 3.0.25同一个Resin多开问题        if (isServerAlreadyRunning())            return;        // we have to create user Secret Key        initSchedule();        if (nStartUpErrorCount == 0) {            System.out.println("nStartUpErrorCount：" + nStartUpErrorCount);        } else {            System.out.println("nStartUpErrorCount：" + nStartUpErrorCount);        }        //Track+[23350] Jim.liu 2013/07/09 servletcontext 修改 ,在項目啟動之後將key 有 password 字樣的屬性刪除        filterSecurityKey();    }    //為配合server.jsp會列印出ServletContext 的屬性,有個CFG_PROPS 屬性,會看到 spool 的密碼,    //判斷 key 有 password 字樣, 就不存這個 key 值    private void filterSecurityKey() {        Enumeration keys = oProps_.keys();        String key = null;        while (keys.hasMoreElements()) {            key = (String) keys.nextElement();            if (key.toLowerCase().indexOf("password") >= 0) {                oProps_.remove(key);            }        }    }    private boolean verify(Properties props) {        try {            String sSignature = props.getProperty("SIGNATURE");            String sPublicKey = props.getProperty("SIGNPUBKEY");            String sUserLicense = props.getProperty("user.license", "10");            String sExpireDate = props.getProperty("expire", "0000000");            int nExpire = Integer.parseInt(sExpireDate);            int nCurrDate = Integer.parseInt(emisUtil.formatDateTime("%y%M%D", new Date()));            if (nExpire < nCurrDate)                return false;            String _data = sUserLicense + "EMIS" + sExpireDate;            byte[] data = _data.getBytes();            byte[] encoded = emisUtil.DecodeStrToByte(sPublicKey);            byte[] signature = emisUtil.DecodeStrToByte(sSignature);            X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encoded);            KeyFactory keyFactory = KeyFactory.getInstance("DSA");            PublicKey publicKey = keyFactory.generatePublic(pubKeySpec);            Signature dsa = Signature.getInstance("SHA1withDSA");            dsa.initVerify(publicKey);            dsa.update(data);            return dsa.verify(signature);        } catch (Exception e) {            System.out.println("emisServerImpl.verify: " + e.getMessage());        }        return false;    }    /**     * 取出Log檔的保留MilliSeconds數.     *     * @return long     */    private long getLogsKeepTimes() {        String _sDays = oProps_.getProperty("log.keepdays");        long _lKeepTimes = MAX_LOGS_KEEP_TIMES;        if (_sDays != null && !"".equals(_sDays)) {            try {                _lKeepTimes = Integer.parseInt(_sDays);  // 天數                _lKeepTimes = _lKeepTimes * 24 * 60 * 60 * 1000;  // 變成Milliseconds            } catch (NumberFormatException e) {                ;            }        }        return _lKeepTimes;    }    private void changeSetup(String sPrefix, String sPassword, boolean isModifyEncrypt)            throws IOException {        boolean isPasswdModified = false;        boolean isEncryptModified = false;        LineNumberReader lreader = new LineNumberReader(new FileReader(sConfigFile_));        File tmpF = new File(sConfigFile_ + "_");        try {            PrintWriter out = new PrintWriter(new FileWriter(tmpF));            try {                String _line = null;                String sUpperPrefix = sPrefix.toUpperCase();                String _sToken = sUpperPrefix + "PASSWORD=";                String _sEncToken = sUpperPrefix + "ENCRYPT=";                while ((_line = lreader.readLine()) != null) {                    if (_line.trim().startsWith("#")) {  // a comment                        out.println(_line);                        continue;                    }                    String sUpperLine = _line.toUpperCase();                    if (sUpperLine.indexOf(_sToken) != -1) {                        if (!isModifyEncrypt) {                            out.println(sPrefix + "encrypt=true");                            isEncryptModified = true;                        }                        out.println(sPrefix + "password=" + sPassword);                        isPasswdModified = true;                        continue;                    }                    if (isModifyEncrypt) {                        if (sUpperLine.indexOf(_sEncToken) != -1) {                            out.println(sPrefix + "encrypt=true");                            isEncryptModified = true;                            continue;                        }                    }                    out.println(_line);                }                out.flush();            } finally {                out.close();            }        } finally {            lreader.close();        }        if (!(isPasswdModified && isEncryptModified))            throw new IOException("Config file Modification error");        // copy the the into the original , and delete it        try {            FileInputStream in = new FileInputStream(tmpF);            try {                FileOutputStream out = new FileOutputStream(sConfigFile_);                try {                    byte[] buf = new byte[1024];                    int readed;                    while ((readed = in.read(buf)) != -1) {                        out.write(buf, 0, readed);                    }                } finally {                    out.close();                }            } finally {                in.close();            }        } finally {            tmpF.delete();            tmpF = null;        }    }    /**     * 啟動排程作業.     *     * @throws Exception     */    private void initSchedule() throws Exception {        try {            emisScheduleMgr _oMgr = new emisScheduleMgr(oContext_, oProps_, jdbcTemplate);            System.out.println("initSchedule");        } catch (Exception e) {            e.printStackTrace();            System.out.println(e.getMessage());            nStartUpErrorCount++;        }    }    /**     * 取回Properties.     *     * @return     * @throws RemoteException     */    public Properties getProperties() throws RemoteException {        return oProps_;    }    /**     * 設定Tracer狀態.     *     * @param _debug     * @throws Exception     */    @Override    public void enableDebug(boolean _debug) throws Exception {    }    /**     * 取回Manager物件.     *     * @param sMgrName     * @return     */    public Object getMgrObject(String sMgrName) {        return oMgrObjects_.get(sMgrName);    }    /**     * 傳回Server名稱.     *     * @return     */    public String getServerName() {        return sServerName_;    }    /**     * 由傳入的.cfg取出所有Property.     *     * @param sConfigFile 如eros.cfg, tai.cfg     * @return Properties     * @throws IOException     */    private Properties getServerConfiguration(String sConfigFile) throws IOException {        Properties _oProp = null;        InputStream _oIn = null;        try {            _oIn = new FileInputStream(sConfigFile);            _oProp = new Properties();            _oProp.load(_oIn);            return _oProp;        } catch (FileNotFoundException e) {            oContext_.log("emisServerImpl: Config file is missing: " + sConfigFile);            throw new IOException("emisServerImpl: Can't find EMIS config file:" + sConfigFile);        } finally {            if (_oIn != null) _oIn.close();        }    }    private Thread releaseLock = null;    public void shutdown() throws Exception {        if (releaseLock != null) {            Runtime.getRuntime().removeShutdownHook(releaseLock);            releaseLock.start();            releaseLock = null;        }    }    /**     * 用于锁定文件，实现程序单开（即不允许多个实例）     *     * @param lockFile     * @return     */    private boolean lockInstance(final String lockFile) {        try {            final File file = new File(lockFile);            final RandomAccessFile randomAccessFile = new RandomAccessFile(                    file, "rw");            final FileLock fileLock = randomAccessFile.getChannel().tryLock();            if (fileLock != null) {                releaseLock = new Thread() {                    public void run() {                        try {                            fileLock.release();                            randomAccessFile.close();                            file.delete();                            oContext_.log("EMIS Server shutdown......");                        } catch (Exception e) {                            oContext_.log("Unable to remove lock file: " + lockFile, e);                        }                    }                };                releaseLock.setName("Release Lock Server - " + System.currentTimeMillis());                Runtime.getRuntime().addShutdownHook(releaseLock);                return true;            }        } catch (Exception e) {            oContext_.log("Unable to create and/or lock file: " + lockFile, e);        }        return false;    }    /**     * 服务器是否已开启     *     * @return     */    private boolean isServerAlreadyRunning() {        if ("false".equalsIgnoreCase(oProps_.getProperty("server.lockServer"))) return false;        String sRoot = oProps_.getProperty("documentroot");        if (lockInstance(sRoot + "/.lockServer")) {            oContext_.log("EMIS Server starting......");            return false;        } else {            oContext_.log("Another EMIS Server is running, can not startup a new instance......");            return true;        }    }}